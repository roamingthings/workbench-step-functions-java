AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  workbench-step-functions-java

  Retrieve jokes asynchronously the Serverless way implemented in Java.

Globals:
  Function:
    Environment:
      Variables:
        POWERTOOLS_METRICS_NAMESPACE: WorkbenchStepFunctionsJava
        POWERTOOLS_LOG_LEVEL: info
    Runtime: java11
    MemorySize: 512
    Timeout: 20
  Api:
    Auth:
      DefaultAuthorizer: JokeApplicationAuthorizer
      Authorizers:
        JokeApplicationAuthorizer:
          FunctionPayloadType: REQUEST
          FunctionArn: !GetAtt AuthorizerFunction.Arn
          Identity:
            # Must specify at least one of Headers, QueryStrings, StageVariables, or Context
            Headers:
              - Authorization
            #        QueryStrings: # OPTIONAL
            #          - Authorization2
            ReauthorizeEvery: 0 # OPTIONAL; Service Default: 300

Resources:
  RetrieveJokeStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/retrieve_joke.asl.json
      DefinitionSubstitutions:
        RetrieveJokeFunctionArn: !GetAtt RetrieveJokeFunction.Arn
        DDBPutJokesJob: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        DDBUpdateJokesJob: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        DDBTable: !Ref JokesJobTable
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref RetrieveJokeFunction
        - DynamoDBWritePolicy:
            TableName: !Ref JokesJobTable

  AuthTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: JokeAppAuthSecret
      Description: The secret used for the authorization token
      SecretString:
        Update value in management console

  JokeFunctionApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: "Joke-Function-Api"
      OpenApiVersion: "3.0.1"

  JokeApplicationApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: "Joke-Application-Api"

  JokeApiApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: "Joke-Api-Api"

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: function-authorizer
      Handler: de.roamingthings.jokes.fn.authorizer.AuthorizationHandler
      Description: Custom Authorizer Function of the application
      Environment:
        Variables:
          MICRONAUT_ENVIRONMENTS: aws,function
          POWERTOOLS_SERVICE_NAME: AuthorizerFunction
          SECRET_ID: JokeAppAuthSecret
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn:
              Ref: AuthTokenSecret

  # Functions implemented as single micronaut functions
  CreateJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: function-create-job
      Handler: de.roamingthings.jokes.fn.createjob.CreateJobHandler
      Description: Create and start a new job and return the job id
      Tracing: Active
      Environment:
        Variables:
          RETRIEVE_JOKE_STATE_MACHINE_ARN: !Ref RetrieveJokeStateMachine
          MICRONAUT_ENVIRONMENTS: aws,function
          POWERTOOLS_SERVICE_NAME: CreateJobFunction
      Policies:
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt RetrieveJokeStateMachine.Name
      Events:
        CreateJob:
          Type: Api
          Properties:
            Path: /jobs
            Method: post
            RestApiId:
              Ref: JokeFunctionApi

  JobStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: function-job-status
      Handler: de.roamingthings.jokes.fn.status.JobStatusHandler
      Description: Retrieve the current status of a job
      Environment:
        Variables:
          JOB_TABLE: !Ref JokesJobTable
          MICRONAUT_ENVIRONMENTS: aws,function
          POWERTOOLS_SERVICE_NAME: JobStatusFunction
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - DynamoDBReadPolicy:
            TableName: !Ref JokesJobTable
      Events:
        JobStatus:
          Type: Api
          Properties:
            Path: /jobs/{jobId+}
            Method: get
            RestApiId:
              Ref: JokeFunctionApi

  RetrieveJokeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: function-retrieve-joke
      Handler: de.roamingthings.jokes.fn.retrieve.RetrieveJokeHandler
      Description: Retrieve a Joke from the external JokeAPI
      Environment:
        Variables:
          MICRONAUT_ENVIRONMENTS: aws,function
          POWERTOOLS_SERVICE_NAME: RetrieveJokeFunction

  # Functions implemented as single micronaut applications
  CreateJobAppFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: function-app-create-job
      Handler: io.micronaut.function.aws.proxy.MicronautLambdaHandler
      Description: Create and start a new job and return the job id. Implemented as Micronaut application.
      Environment:
        Variables:
          RETRIEVE_JOKE_STATE_MACHINE_ARN: !Ref RetrieveJokeStateMachine
          MICRONAUT_ENVIRONMENTS: aws,function
          POWERTOOLS_SERVICE_NAME: CreateJobAppFunction
      Policies:
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt RetrieveJokeStateMachine.Name
      Events:
        CreateJob:
          Type: Api
          Properties:
            Path: /jobs
            Method: post
            RestApiId:
              Ref: JokeApplicationApi

  JobStatusAppFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: function-app-job-status
      Handler: io.micronaut.function.aws.proxy.MicronautLambdaHandler
      Description: Retrieve the current status of a job. Implemented as Micronaut application.
      Environment:
        Variables:
          JOB_TABLE: !Ref JokesJobTable
          MICRONAUT_ENVIRONMENTS: aws,function
          POWERTOOLS_SERVICE_NAME: JobStatusAppFunction
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - DynamoDBReadPolicy:
            TableName: !Ref JokesJobTable
      Events:
        JobStatus:
          Type: Api
          Properties:
            Path: /jobs/{jobId+}
            Method: get
            RestApiId:
              Ref: JokeApplicationApi

  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: function-api-app
      Handler: io.micronaut.function.aws.proxy.MicronautLambdaHandler
      Description: On App to handle all API calls
      Environment:
        Variables:
          JOB_TABLE: !Ref JokesJobTable
          RETRIEVE_JOKE_STATE_MACHINE_ARN: !Ref RetrieveJokeStateMachine
          MICRONAUT_ENVIRONMENTS: aws,function
          POWERTOOLS_SERVICE_NAME: ApiFunction
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - DynamoDBReadPolicy:
            TableName: !Ref JokesJobTable
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt RetrieveJokeStateMachine.Name
      Events:
        JobStatusApiApp:
          Type: Api
          Properties:
            Path: /jobs/{jobId+}
            Method: get
            RestApiId:
              Ref: JokeApiApi
        CreateJobApiApp:
          Type: Api
          Properties:
            Path: /jobs
            Method: post
            RestApiId:
              Ref: JokeApiApi

  JokesJobTable:
    Type: AWS::Serverless::SimpleTable # More info about SimpleTable Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-simpletable.html
    Properties:
      PrimaryKey:
        Name: Id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

Outputs:
  CreateJobApi:
    Description: "API Gateway endpoint URL for Prod stage for Create Job function (Authorization Header is required)"
    Value: !Sub "https://${JokeFunctionApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/jobs"
  CreateJobAppApi:
    Description: "API Gateway endpoint URL for Prod stage for Create Job function (implemented as app) (Authorization Header is required)"
    Value: !Sub "https://${JokeApplicationApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/jobs"
  CreateJobApiApi:
    Description: "API Gateway endpoint URL for Prod stage for Create Job function (implemented as monolith app) (Authorization Header is required)"
    Value: !Sub "https://${JokeApiApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/jobs"
