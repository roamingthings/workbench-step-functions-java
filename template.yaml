AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  workbench-step-functions-java

  Retrieve jokes asynchronously the Serverless way implemented in Java.

Globals:
  Function:
    Environment:
      # # Environment variables used by every function
      # Variables:
      #  SAMPLE_TABLE: !Ref SampleTable
    Runtime: java11
    MemorySize: 320
    Timeout: 20

Resources:
  RetrieveJokeStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/retrieve_joke.asl.json
      DefinitionSubstitutions:
        RetrieveJokeFunctionArn: !GetAtt RetrieveJokeFunction.Arn
        DDBPutJokesJob: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        DDBTable: !Ref JokesJobTable
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref RetrieveJokeFunction
        - DynamoDBWritePolicy:
            TableName: !Ref JokesJobTable

  # Functions implemented as single micronaut functions
  CreateJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: function-create-job
      Handler: de.roamingthings.jokes.fn.createjob.CreateJobHandler
      Description: Create and start a new job and return the job id
      Environment:
        Variables:
          RETRIEVE_JOKE_STATE_MACHINE_ARN: !Ref RetrieveJokeStateMachine
          MICRONAUT_ENVIRONMENTS: aws,function
      Policies:
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt RetrieveJokeStateMachine.Name
      Events:
        CreateJob:
          Type: Api
          Properties:
            Path: /jobs
            Method: post

  JobStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: function-job-status
      Handler: de.roamingthings.jokes.fn.status.JobStatusHandler
      Description: Retrieve the current status of a job
      Environment:
        Variables:
          JOB_TABLE: !Ref JokesJobTable
          MICRONAUT_ENVIRONMENTS: aws,function
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - DynamoDBReadPolicy:
            TableName: !Ref JokesJobTable
      Events:
        JobStatus:
          Type: Api
          Properties:
            Path: /jobs/{jobId+}
            Method: get

  RetrieveJokeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: function-retrieve-joke
      Handler: de.roamingthings.jokes.fn.retrieve.RetrieveJokeHandler
      Description: Retrieve a Joke from the external JokeAPI
      MemorySize: 384
      Environment:
        Variables:
          MICRONAUT_ENVIRONMENTS: aws,function

  # Functions implemented as single micronaut applications
  CreateJobAppFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: function-app-create-job
      Handler: io.micronaut.function.aws.proxy.MicronautLambdaHandler
      MemorySize: 384
      Description: Create and start a new job and return the job id. Implemented as Micronaut application.
      Environment:
        Variables:
          RETRIEVE_JOKE_STATE_MACHINE_ARN: !Ref RetrieveJokeStateMachine
          MICRONAUT_ENVIRONMENTS: aws,function
      Policies:
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt RetrieveJokeStateMachine.Name
      Events:
        CreateJob:
          Type: Api
          Properties:
            Path: /app/jobs
            Method: post

  JobStatusAppFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: function-app-job-status
      Handler: io.micronaut.function.aws.proxy.MicronautLambdaHandler
      MemorySize: 384
      Description: Retrieve the current status of a job. Implemented as Micronaut application.
      Environment:
        Variables:
          JOB_TABLE: !Ref JokesJobTable
          MICRONAUT_ENVIRONMENTS: aws,function
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - DynamoDBReadPolicy:
            TableName: !Ref JokesJobTable
      Events:
        JobStatus:
          Type: Api
          Properties:
            Path: /app/jobs/{jobId+}
            Method: get

  # Function implemented as monolith micronaut applications
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: function-api-app
      Handler: io.micronaut.function.aws.proxy.MicronautLambdaHandler
      MemorySize: 512
      Description: On App to handle all API calls
      Environment:
        Variables:
          JOB_TABLE: !Ref JokesJobTable
          RETRIEVE_JOKE_STATE_MACHINE_ARN: !Ref RetrieveJokeStateMachine
          MICRONAUT_ENVIRONMENTS: aws,function
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - DynamoDBReadPolicy:
            TableName: !Ref JokesJobTable
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt RetrieveJokeStateMachine.Name
      Events:
        JobStatusApiApp:
          Type: Api
          Properties:
            Path: /api/jobs/{jobId+}
            Method: get
        CreateJobApiApp:
          Type: Api
          Properties:
            Path: /api/jobs
            Method: post

  JokesJobTable:
    Type: AWS::Serverless::SimpleTable # More info about SimpleTable Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-simpletable.html
    Properties:
      PrimaryKey:
        Name: Id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  CreateJobApi:
    Description: "API Gateway endpoint URL for Prod stage for Create Job function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/jobs"
  CreateJobAppApi:
    Description: "API Gateway endpoint URL for Prod stage for Create Job function (implemented as app)"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/app/jobs"
  CreateJobApiApi:
    Description: "API Gateway endpoint URL for Prod stage for Create Job function (implemented as monolith app)"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/jobs"
  CreateJobFunction:
    Description: "Create Job Lambda Function ARN"
    Value: !GetAtt CreateJobFunction.Arn
  CreateJobIamRole:
    Description: "Implicit IAM Role created for Create Job function"
    Value: !GetAtt CreateJobFunctionRole.Arn
  RetrieveJokeStateMachineArn:
    Description: "Retrieve Joke state machine ARN"
    Value: !Ref RetrieveJokeStateMachine
  RetrieveJokeStateMachineRole:
    Description: "IAM Role created for Retrieve Joke state machine based on the specified SAM Policy Templates"
    Value: !GetAtt RetrieveJokeStateMachine.Arn
